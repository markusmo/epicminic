Grammar

    0 $accept: program $end

    1 program: decList funcList
    2        | decList
    3        | funcList
    4        | /* empty */

    5 funcList: function
    6         | function funcList

    7 decList: declaration
    8        | decList declaration

    9 declaration: type identList SEMICOLON

   10 identList: identifier
   11          | identifier COLON identList

   12 identifier: ID
   13           | ID LBRACKET INTNUM RBRACKET

   14 function: type ID LPARENT paramList RPARENT compoundStatement
   15         | type ID LPARENT RPARENT compoundStatement

   16 paramList: type identifier
   17          | type identifier COLON paramList

   18 type: INT
   19     | FLOAT

   20 compoundStatement: LFANCYBRACKET stmtList RFANCYBRACKET
   21                  | LFANCYBRACKET decList stmtList RFANCYBRACKET

   22 stmtList: stmtListL
   23         | /* empty */

   24 stmtListL: statement
   25          | statement stmtListL

   26 statement: assignStmt
   27          | callStmt
   28          | retStmt
   29          | whileStmt
   30          | doWhileStmt
   31          | forStmt
   32          | ifStmt
   33          | compoundStatement
   34          | SEMICOLON

   35 assignStmt: assign SEMICOLON

   36 assign: ID ASSIGN expr
   37       | ID LBRACKET expr RBRACKET ASSIGN expr

   38 callStmt: call SEMICOLON

   39 call: ID LPARENT argList RPARENT
   40     | ID LPARENT RPARENT

   41 retStmt: RETURN expr SEMICOLON
   42        | RETURN SEMICOLON

   43 whileStmt: WHILE LPARENT expr RPARENT statement

   44 doWhileStmt: DO statement WHILE LPARENT expr RPARENT SEMICOLON

   45 forStmt: FOR LPARENT assign SEMICOLON expr SEMICOLON assign RPARENT statement

   46 ifStmt: IF LPARENT expr RPARENT statement
   47       | IF LPARENT expr RPARENT statement ELSE statement

   48 expr: expr PLUS expr
   49     | expr MINUS expr
   50     | expr MULT expr
   51     | expr DIV expr
   52     | expr LT expr
   53     | expr LE expr
   54     | expr GT expr
   55     | expr GE expr
   56     | expr EQ expr
   57     | expr NE expr
   58     | MINUS expr
   59     | INTNUM
   60     | FLOATNUM
   61     | ID
   62     | ID LBRACKET expr RBRACKET
   63     | LPARENT expr RPARENT
   64     | call

   65 argList: expr
   66        | expr COLON argList


Terminals, with rules where they appear

$end (0) 0
error (256)
INT (258) 18
INTNUM (259) 13 59
FLOAT (260) 19
FLOATNUM (261) 60
FOR (262) 45
WHILE (263) 43 44
DO (264) 44
IF (265) 46 47
ELSE (266) 47
RETURN (267) 41 42
ID (268) 12 13 14 15 36 37 39 40 61 62
DIV (269) 51
MULT (270) 50
PLUS (271) 48
MINUS (272) 49 58
LT (273) 52
NE (274) 57
EQ (275) 56
GT (276) 54
LE (277) 53
GE (278) 55
ASSIGN (279) 36 37
LPARENT (280) 14 15 39 40 43 44 45 46 47 63
RPARENT (281) 14 15 39 40 43 44 45 46 47 63
LFANCYBRACKET (282) 20 21
RFANCYBRACKET (283) 20 21
LBRACKET (284) 13 37 62
RBRACKET (285) 13 37 62
SEMICOLON (286) 9 34 35 38 41 42 44 45
COLON (287) 11 17 66


Nonterminals, with rules where they appear

$accept (33)
    on left: 0
program (34)
    on left: 1 2 3 4, on right: 0
funcList (35)
    on left: 5 6, on right: 1 3 6
decList (36)
    on left: 7 8, on right: 1 2 8 21
declaration (37)
    on left: 9, on right: 7 8
identList (38)
    on left: 10 11, on right: 9 11
identifier (39)
    on left: 12 13, on right: 10 11 16 17
function (40)
    on left: 14 15, on right: 5 6
paramList (41)
    on left: 16 17, on right: 14 17
type (42)
    on left: 18 19, on right: 9 14 15 16 17
compoundStatement (43)
    on left: 20 21, on right: 14 15 33
stmtList (44)
    on left: 22 23, on right: 20 21
stmtListL (45)
    on left: 24 25, on right: 22 25
statement (46)
    on left: 26 27 28 29 30 31 32 33 34, on right: 24 25 43 44 45 46
    47
assignStmt (47)
    on left: 35, on right: 26
assign (48)
    on left: 36 37, on right: 35 45
callStmt (49)
    on left: 38, on right: 27
call (50)
    on left: 39 40, on right: 38 64
retStmt (51)
    on left: 41 42, on right: 28
whileStmt (52)
    on left: 43, on right: 29
doWhileStmt (53)
    on left: 44, on right: 30
forStmt (54)
    on left: 45, on right: 31
ifStmt (55)
    on left: 46 47, on right: 32
expr (56)
    on left: 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64, on right:
    36 37 41 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 62 63
    65 66
argList (57)
    on left: 65 66, on right: 39 66


state 0

    0 $accept: . program $end
    1 program: . decList funcList
    2        | . decList
    3        | . funcList
    4        | .  [$end]
    5 funcList: . function
    6         | . function funcList
    7 decList: . declaration
    8        | . decList declaration
    9 declaration: . type identList SEMICOLON
   14 function: . type ID LPARENT paramList RPARENT compoundStatement
   15         | . type ID LPARENT RPARENT compoundStatement
   18 type: . INT
   19     | . FLOAT

    INT    shift, and go to state 1
    FLOAT  shift, and go to state 2

    $default  reduce using rule 4 (program)

    program      go to state 3
    funcList     go to state 4
    decList      go to state 5
    declaration  go to state 6
    function     go to state 7
    type         go to state 8


state 1

   18 type: INT .

    $default  reduce using rule 18 (type)


state 2

   19 type: FLOAT .

    $default  reduce using rule 19 (type)


state 3

    0 $accept: program . $end

    $end  shift, and go to state 9


state 4

    3 program: funcList .

    $default  reduce using rule 3 (program)


state 5

    1 program: decList . funcList
    2        | decList .  [$end]
    5 funcList: . function
    6         | . function funcList
    8 decList: decList . declaration
    9 declaration: . type identList SEMICOLON
   14 function: . type ID LPARENT paramList RPARENT compoundStatement
   15         | . type ID LPARENT RPARENT compoundStatement
   18 type: . INT
   19     | . FLOAT

    INT    shift, and go to state 1
    FLOAT  shift, and go to state 2

    $default  reduce using rule 2 (program)

    funcList     go to state 10
    declaration  go to state 11
    function     go to state 7
    type         go to state 8


state 6

    7 decList: declaration .

    $default  reduce using rule 7 (decList)


state 7

    5 funcList: . function
    5         | function .  [$end]
    6         | . function funcList
    6         | function . funcList
   14 function: . type ID LPARENT paramList RPARENT compoundStatement
   15         | . type ID LPARENT RPARENT compoundStatement
   18 type: . INT
   19     | . FLOAT

    INT    shift, and go to state 1
    FLOAT  shift, and go to state 2

    $default  reduce using rule 5 (funcList)

    funcList  go to state 12
    function  go to state 7
    type      go to state 13


state 8

    9 declaration: type . identList SEMICOLON
   10 identList: . identifier
   11          | . identifier COLON identList
   12 identifier: . ID
   13           | . ID LBRACKET INTNUM RBRACKET
   14 function: type . ID LPARENT paramList RPARENT compoundStatement
   15         | type . ID LPARENT RPARENT compoundStatement

    ID  shift, and go to state 14

    identList   go to state 15
    identifier  go to state 16


state 9

    0 $accept: program $end .

    $default  accept


state 10

    1 program: decList funcList .

    $default  reduce using rule 1 (program)


state 11

    8 decList: decList declaration .

    $default  reduce using rule 8 (decList)


state 12

    6 funcList: function funcList .

    $default  reduce using rule 6 (funcList)


state 13

   14 function: type . ID LPARENT paramList RPARENT compoundStatement
   15         | type . ID LPARENT RPARENT compoundStatement

    ID  shift, and go to state 17


state 14

   12 identifier: ID .  [SEMICOLON, COLON]
   13           | ID . LBRACKET INTNUM RBRACKET
   14 function: type ID . LPARENT paramList RPARENT compoundStatement
   15         | type ID . LPARENT RPARENT compoundStatement

    LPARENT   shift, and go to state 18
    LBRACKET  shift, and go to state 19

    $default  reduce using rule 12 (identifier)


state 15

    9 declaration: type identList . SEMICOLON

    SEMICOLON  shift, and go to state 20


state 16

   10 identList: identifier .  [SEMICOLON]
   11          | identifier . COLON identList

    COLON  shift, and go to state 21

    $default  reduce using rule 10 (identList)


state 17

   14 function: type ID . LPARENT paramList RPARENT compoundStatement
   15         | type ID . LPARENT RPARENT compoundStatement

    LPARENT  shift, and go to state 18


state 18

   14 function: type ID LPARENT . paramList RPARENT compoundStatement
   15         | type ID LPARENT . RPARENT compoundStatement
   16 paramList: . type identifier
   17          | . type identifier COLON paramList
   18 type: . INT
   19     | . FLOAT

    INT      shift, and go to state 1
    FLOAT    shift, and go to state 2
    RPARENT  shift, and go to state 22

    paramList  go to state 23
    type       go to state 24


state 19

   13 identifier: ID LBRACKET . INTNUM RBRACKET

    INTNUM  shift, and go to state 25


state 20

    9 declaration: type identList SEMICOLON .

    $default  reduce using rule 9 (declaration)


state 21

   10 identList: . identifier
   11          | . identifier COLON identList
   11          | identifier COLON . identList
   12 identifier: . ID
   13           | . ID LBRACKET INTNUM RBRACKET

    ID  shift, and go to state 26

    identList   go to state 27
    identifier  go to state 16


state 22

   15 function: type ID LPARENT RPARENT . compoundStatement
   20 compoundStatement: . LFANCYBRACKET stmtList RFANCYBRACKET
   21                  | . LFANCYBRACKET decList stmtList RFANCYBRACKET

    LFANCYBRACKET  shift, and go to state 28

    compoundStatement  go to state 29


state 23

   14 function: type ID LPARENT paramList . RPARENT compoundStatement

    RPARENT  shift, and go to state 30


state 24

   12 identifier: . ID
   13           | . ID LBRACKET INTNUM RBRACKET
   16 paramList: type . identifier
   17          | type . identifier COLON paramList

    ID  shift, and go to state 26

    identifier  go to state 31


state 25

   13 identifier: ID LBRACKET INTNUM . RBRACKET

    RBRACKET  shift, and go to state 32


state 26

   12 identifier: ID .  [RPARENT, SEMICOLON, COLON]
   13           | ID . LBRACKET INTNUM RBRACKET

    LBRACKET  shift, and go to state 19

    $default  reduce using rule 12 (identifier)


state 27

   11 identList: identifier COLON identList .

    $default  reduce using rule 11 (identList)


state 28

    7 decList: . declaration
    8        | . decList declaration
    9 declaration: . type identList SEMICOLON
   18 type: . INT
   19     | . FLOAT
   20 compoundStatement: . LFANCYBRACKET stmtList RFANCYBRACKET
   20                  | LFANCYBRACKET . stmtList RFANCYBRACKET
   21                  | . LFANCYBRACKET decList stmtList RFANCYBRACKET
   21                  | LFANCYBRACKET . decList stmtList RFANCYBRACKET
   22 stmtList: . stmtListL
   23         | .  [RFANCYBRACKET]
   24 stmtListL: . statement
   25          | . statement stmtListL
   26 statement: . assignStmt
   27          | . callStmt
   28          | . retStmt
   29          | . whileStmt
   30          | . doWhileStmt
   31          | . forStmt
   32          | . ifStmt
   33          | . compoundStatement
   34          | . SEMICOLON
   35 assignStmt: . assign SEMICOLON
   36 assign: . ID ASSIGN expr
   37       | . ID LBRACKET expr RBRACKET ASSIGN expr
   38 callStmt: . call SEMICOLON
   39 call: . ID LPARENT argList RPARENT
   40     | . ID LPARENT RPARENT
   41 retStmt: . RETURN expr SEMICOLON
   42        | . RETURN SEMICOLON
   43 whileStmt: . WHILE LPARENT expr RPARENT statement
   44 doWhileStmt: . DO statement WHILE LPARENT expr RPARENT SEMICOLON
   45 forStmt: . FOR LPARENT assign SEMICOLON expr SEMICOLON assign RPARENT statement
   46 ifStmt: . IF LPARENT expr RPARENT statement
   47       | . IF LPARENT expr RPARENT statement ELSE statement

    INT            shift, and go to state 1
    FLOAT          shift, and go to state 2
    FOR            shift, and go to state 33
    WHILE          shift, and go to state 34
    DO             shift, and go to state 35
    IF             shift, and go to state 36
    RETURN         shift, and go to state 37
    ID             shift, and go to state 38
    LFANCYBRACKET  shift, and go to state 28
    SEMICOLON      shift, and go to state 39

    $default  reduce using rule 23 (stmtList)

    decList            go to state 40
    declaration        go to state 6
    type               go to state 41
    compoundStatement  go to state 42
    stmtList           go to state 43
    stmtListL          go to state 44
    statement          go to state 45
    assignStmt         go to state 46
    assign             go to state 47
    callStmt           go to state 48
    call               go to state 49
    retStmt            go to state 50
    whileStmt          go to state 51
    doWhileStmt        go to state 52
    forStmt            go to state 53
    ifStmt             go to state 54


state 29

   15 function: type ID LPARENT RPARENT compoundStatement .

    $default  reduce using rule 15 (function)


state 30

   14 function: type ID LPARENT paramList RPARENT . compoundStatement
   20 compoundStatement: . LFANCYBRACKET stmtList RFANCYBRACKET
   21                  | . LFANCYBRACKET decList stmtList RFANCYBRACKET

    LFANCYBRACKET  shift, and go to state 28

    compoundStatement  go to state 55


state 31

   16 paramList: type identifier .  [RPARENT]
   17          | type identifier . COLON paramList

    COLON  shift, and go to state 56

    $default  reduce using rule 16 (paramList)


state 32

   13 identifier: ID LBRACKET INTNUM RBRACKET .

    $default  reduce using rule 13 (identifier)


state 33

   45 forStmt: FOR . LPARENT assign SEMICOLON expr SEMICOLON assign RPARENT statement

    LPARENT  shift, and go to state 57


state 34

   43 whileStmt: WHILE . LPARENT expr RPARENT statement

    LPARENT  shift, and go to state 58


state 35

   20 compoundStatement: . LFANCYBRACKET stmtList RFANCYBRACKET
   21                  | . LFANCYBRACKET decList stmtList RFANCYBRACKET
   26 statement: . assignStmt
   27          | . callStmt
   28          | . retStmt
   29          | . whileStmt
   30          | . doWhileStmt
   31          | . forStmt
   32          | . ifStmt
   33          | . compoundStatement
   34          | . SEMICOLON
   35 assignStmt: . assign SEMICOLON
   36 assign: . ID ASSIGN expr
   37       | . ID LBRACKET expr RBRACKET ASSIGN expr
   38 callStmt: . call SEMICOLON
   39 call: . ID LPARENT argList RPARENT
   40     | . ID LPARENT RPARENT
   41 retStmt: . RETURN expr SEMICOLON
   42        | . RETURN SEMICOLON
   43 whileStmt: . WHILE LPARENT expr RPARENT statement
   44 doWhileStmt: . DO statement WHILE LPARENT expr RPARENT SEMICOLON
   44            | DO . statement WHILE LPARENT expr RPARENT SEMICOLON
   45 forStmt: . FOR LPARENT assign SEMICOLON expr SEMICOLON assign RPARENT statement
   46 ifStmt: . IF LPARENT expr RPARENT statement
   47       | . IF LPARENT expr RPARENT statement ELSE statement

    FOR            shift, and go to state 33
    WHILE          shift, and go to state 34
    DO             shift, and go to state 35
    IF             shift, and go to state 36
    RETURN         shift, and go to state 37
    ID             shift, and go to state 38
    LFANCYBRACKET  shift, and go to state 28
    SEMICOLON      shift, and go to state 39

    compoundStatement  go to state 42
    statement          go to state 59
    assignStmt         go to state 46
    assign             go to state 47
    callStmt           go to state 48
    call               go to state 49
    retStmt            go to state 50
    whileStmt          go to state 51
    doWhileStmt        go to state 52
    forStmt            go to state 53
    ifStmt             go to state 54


state 36

   46 ifStmt: IF . LPARENT expr RPARENT statement
   47       | IF . LPARENT expr RPARENT statement ELSE statement

    LPARENT  shift, and go to state 60


state 37

   39 call: . ID LPARENT argList RPARENT
   40     | . ID LPARENT RPARENT
   41 retStmt: RETURN . expr SEMICOLON
   42        | RETURN . SEMICOLON
   48 expr: . expr PLUS expr
   49     | . expr MINUS expr
   50     | . expr MULT expr
   51     | . expr DIV expr
   52     | . expr LT expr
   53     | . expr LE expr
   54     | . expr GT expr
   55     | . expr GE expr
   56     | . expr EQ expr
   57     | . expr NE expr
   58     | . MINUS expr
   59     | . INTNUM
   60     | . FLOATNUM
   61     | . ID
   62     | . ID LBRACKET expr RBRACKET
   63     | . LPARENT expr RPARENT
   64     | . call

    INTNUM     shift, and go to state 61
    FLOATNUM   shift, and go to state 62
    ID         shift, and go to state 63
    MINUS      shift, and go to state 64
    LPARENT    shift, and go to state 65
    SEMICOLON  shift, and go to state 66

    call  go to state 67
    expr  go to state 68


state 38

   36 assign: ID . ASSIGN expr
   37       | ID . LBRACKET expr RBRACKET ASSIGN expr
   39 call: ID . LPARENT argList RPARENT
   40     | ID . LPARENT RPARENT

    ASSIGN    shift, and go to state 69
    LPARENT   shift, and go to state 70
    LBRACKET  shift, and go to state 71


state 39

   34 statement: SEMICOLON .

    $default  reduce using rule 34 (statement)


state 40

    8 decList: decList . declaration
    9 declaration: . type identList SEMICOLON
   18 type: . INT
   19     | . FLOAT
   20 compoundStatement: . LFANCYBRACKET stmtList RFANCYBRACKET
   21                  | . LFANCYBRACKET decList stmtList RFANCYBRACKET
   21                  | LFANCYBRACKET decList . stmtList RFANCYBRACKET
   22 stmtList: . stmtListL
   23         | .  [RFANCYBRACKET]
   24 stmtListL: . statement
   25          | . statement stmtListL
   26 statement: . assignStmt
   27          | . callStmt
   28          | . retStmt
   29          | . whileStmt
   30          | . doWhileStmt
   31          | . forStmt
   32          | . ifStmt
   33          | . compoundStatement
   34          | . SEMICOLON
   35 assignStmt: . assign SEMICOLON
   36 assign: . ID ASSIGN expr
   37       | . ID LBRACKET expr RBRACKET ASSIGN expr
   38 callStmt: . call SEMICOLON
   39 call: . ID LPARENT argList RPARENT
   40     | . ID LPARENT RPARENT
   41 retStmt: . RETURN expr SEMICOLON
   42        | . RETURN SEMICOLON
   43 whileStmt: . WHILE LPARENT expr RPARENT statement
   44 doWhileStmt: . DO statement WHILE LPARENT expr RPARENT SEMICOLON
   45 forStmt: . FOR LPARENT assign SEMICOLON expr SEMICOLON assign RPARENT statement
   46 ifStmt: . IF LPARENT expr RPARENT statement
   47       | . IF LPARENT expr RPARENT statement ELSE statement

    INT            shift, and go to state 1
    FLOAT          shift, and go to state 2
    FOR            shift, and go to state 33
    WHILE          shift, and go to state 34
    DO             shift, and go to state 35
    IF             shift, and go to state 36
    RETURN         shift, and go to state 37
    ID             shift, and go to state 38
    LFANCYBRACKET  shift, and go to state 28
    SEMICOLON      shift, and go to state 39

    $default  reduce using rule 23 (stmtList)

    declaration        go to state 11
    type               go to state 41
    compoundStatement  go to state 42
    stmtList           go to state 72
    stmtListL          go to state 44
    statement          go to state 45
    assignStmt         go to state 46
    assign             go to state 47
    callStmt           go to state 48
    call               go to state 49
    retStmt            go to state 50
    whileStmt          go to state 51
    doWhileStmt        go to state 52
    forStmt            go to state 53
    ifStmt             go to state 54


state 41

    9 declaration: type . identList SEMICOLON
   10 identList: . identifier
   11          | . identifier COLON identList
   12 identifier: . ID
   13           | . ID LBRACKET INTNUM RBRACKET

    ID  shift, and go to state 26

    identList   go to state 15
    identifier  go to state 16


state 42

   33 statement: compoundStatement .

    $default  reduce using rule 33 (statement)


state 43

   20 compoundStatement: LFANCYBRACKET stmtList . RFANCYBRACKET

    RFANCYBRACKET  shift, and go to state 73


state 44

   22 stmtList: stmtListL .

    $default  reduce using rule 22 (stmtList)


state 45

   20 compoundStatement: . LFANCYBRACKET stmtList RFANCYBRACKET
   21                  | . LFANCYBRACKET decList stmtList RFANCYBRACKET
   24 stmtListL: . statement
   24          | statement .  [RFANCYBRACKET]
   25          | . statement stmtListL
   25          | statement . stmtListL
   26 statement: . assignStmt
   27          | . callStmt
   28          | . retStmt
   29          | . whileStmt
   30          | . doWhileStmt
   31          | . forStmt
   32          | . ifStmt
   33          | . compoundStatement
   34          | . SEMICOLON
   35 assignStmt: . assign SEMICOLON
   36 assign: . ID ASSIGN expr
   37       | . ID LBRACKET expr RBRACKET ASSIGN expr
   38 callStmt: . call SEMICOLON
   39 call: . ID LPARENT argList RPARENT
   40     | . ID LPARENT RPARENT
   41 retStmt: . RETURN expr SEMICOLON
   42        | . RETURN SEMICOLON
   43 whileStmt: . WHILE LPARENT expr RPARENT statement
   44 doWhileStmt: . DO statement WHILE LPARENT expr RPARENT SEMICOLON
   45 forStmt: . FOR LPARENT assign SEMICOLON expr SEMICOLON assign RPARENT statement
   46 ifStmt: . IF LPARENT expr RPARENT statement
   47       | . IF LPARENT expr RPARENT statement ELSE statement

    FOR            shift, and go to state 33
    WHILE          shift, and go to state 34
    DO             shift, and go to state 35
    IF             shift, and go to state 36
    RETURN         shift, and go to state 37
    ID             shift, and go to state 38
    LFANCYBRACKET  shift, and go to state 28
    SEMICOLON      shift, and go to state 39

    $default  reduce using rule 24 (stmtListL)

    compoundStatement  go to state 42
    stmtListL          go to state 74
    statement          go to state 45
    assignStmt         go to state 46
    assign             go to state 47
    callStmt           go to state 48
    call               go to state 49
    retStmt            go to state 50
    whileStmt          go to state 51
    doWhileStmt        go to state 52
    forStmt            go to state 53
    ifStmt             go to state 54


state 46

   26 statement: assignStmt .

    $default  reduce using rule 26 (statement)


state 47

   35 assignStmt: assign . SEMICOLON

    SEMICOLON  shift, and go to state 75


state 48

   27 statement: callStmt .

    $default  reduce using rule 27 (statement)


state 49

   38 callStmt: call . SEMICOLON

    SEMICOLON  shift, and go to state 76


state 50

   28 statement: retStmt .

    $default  reduce using rule 28 (statement)


state 51

   29 statement: whileStmt .

    $default  reduce using rule 29 (statement)


state 52

   30 statement: doWhileStmt .

    $default  reduce using rule 30 (statement)


state 53

   31 statement: forStmt .

    $default  reduce using rule 31 (statement)


state 54

   32 statement: ifStmt .

    $default  reduce using rule 32 (statement)


state 55

   14 function: type ID LPARENT paramList RPARENT compoundStatement .

    $default  reduce using rule 14 (function)


state 56

   16 paramList: . type identifier
   17          | . type identifier COLON paramList
   17          | type identifier COLON . paramList
   18 type: . INT
   19     | . FLOAT

    INT    shift, and go to state 1
    FLOAT  shift, and go to state 2

    paramList  go to state 77
    type       go to state 24


state 57

   36 assign: . ID ASSIGN expr
   37       | . ID LBRACKET expr RBRACKET ASSIGN expr
   45 forStmt: FOR LPARENT . assign SEMICOLON expr SEMICOLON assign RPARENT statement

    ID  shift, and go to state 78

    assign  go to state 79


state 58

   39 call: . ID LPARENT argList RPARENT
   40     | . ID LPARENT RPARENT
   43 whileStmt: WHILE LPARENT . expr RPARENT statement
   48 expr: . expr PLUS expr
   49     | . expr MINUS expr
   50     | . expr MULT expr
   51     | . expr DIV expr
   52     | . expr LT expr
   53     | . expr LE expr
   54     | . expr GT expr
   55     | . expr GE expr
   56     | . expr EQ expr
   57     | . expr NE expr
   58     | . MINUS expr
   59     | . INTNUM
   60     | . FLOATNUM
   61     | . ID
   62     | . ID LBRACKET expr RBRACKET
   63     | . LPARENT expr RPARENT
   64     | . call

    INTNUM    shift, and go to state 61
    FLOATNUM  shift, and go to state 62
    ID        shift, and go to state 63
    MINUS     shift, and go to state 64
    LPARENT   shift, and go to state 65

    call  go to state 67
    expr  go to state 80


state 59

   44 doWhileStmt: DO statement . WHILE LPARENT expr RPARENT SEMICOLON

    WHILE  shift, and go to state 81


state 60

   39 call: . ID LPARENT argList RPARENT
   40     | . ID LPARENT RPARENT
   46 ifStmt: IF LPARENT . expr RPARENT statement
   47       | IF LPARENT . expr RPARENT statement ELSE statement
   48 expr: . expr PLUS expr
   49     | . expr MINUS expr
   50     | . expr MULT expr
   51     | . expr DIV expr
   52     | . expr LT expr
   53     | . expr LE expr
   54     | . expr GT expr
   55     | . expr GE expr
   56     | . expr EQ expr
   57     | . expr NE expr
   58     | . MINUS expr
   59     | . INTNUM
   60     | . FLOATNUM
   61     | . ID
   62     | . ID LBRACKET expr RBRACKET
   63     | . LPARENT expr RPARENT
   64     | . call

    INTNUM    shift, and go to state 61
    FLOATNUM  shift, and go to state 62
    ID        shift, and go to state 63
    MINUS     shift, and go to state 64
    LPARENT   shift, and go to state 65

    call  go to state 67
    expr  go to state 82


state 61

   59 expr: INTNUM .

    $default  reduce using rule 59 (expr)


state 62

   60 expr: FLOATNUM .

    $default  reduce using rule 60 (expr)


state 63

   39 call: ID . LPARENT argList RPARENT
   40     | ID . LPARENT RPARENT
   61 expr: ID .  [DIV, MULT, PLUS, MINUS, LT, NE, EQ, GT, LE, GE, RPARENT, RBRACKET, SEMICOLON, COLON]
   62     | ID . LBRACKET expr RBRACKET

    LPARENT   shift, and go to state 70
    LBRACKET  shift, and go to state 83

    $default  reduce using rule 61 (expr)


state 64

   39 call: . ID LPARENT argList RPARENT
   40     | . ID LPARENT RPARENT
   48 expr: . expr PLUS expr
   49     | . expr MINUS expr
   50     | . expr MULT expr
   51     | . expr DIV expr
   52     | . expr LT expr
   53     | . expr LE expr
   54     | . expr GT expr
   55     | . expr GE expr
   56     | . expr EQ expr
   57     | . expr NE expr
   58     | . MINUS expr
   58     | MINUS . expr
   59     | . INTNUM
   60     | . FLOATNUM
   61     | . ID
   62     | . ID LBRACKET expr RBRACKET
   63     | . LPARENT expr RPARENT
   64     | . call

    INTNUM    shift, and go to state 61
    FLOATNUM  shift, and go to state 62
    ID        shift, and go to state 63
    MINUS     shift, and go to state 64
    LPARENT   shift, and go to state 65

    call  go to state 67
    expr  go to state 84


state 65

   39 call: . ID LPARENT argList RPARENT
   40     | . ID LPARENT RPARENT
   48 expr: . expr PLUS expr
   49     | . expr MINUS expr
   50     | . expr MULT expr
   51     | . expr DIV expr
   52     | . expr LT expr
   53     | . expr LE expr
   54     | . expr GT expr
   55     | . expr GE expr
   56     | . expr EQ expr
   57     | . expr NE expr
   58     | . MINUS expr
   59     | . INTNUM
   60     | . FLOATNUM
   61     | . ID
   62     | . ID LBRACKET expr RBRACKET
   63     | . LPARENT expr RPARENT
   63     | LPARENT . expr RPARENT
   64     | . call

    INTNUM    shift, and go to state 61
    FLOATNUM  shift, and go to state 62
    ID        shift, and go to state 63
    MINUS     shift, and go to state 64
    LPARENT   shift, and go to state 65

    call  go to state 67
    expr  go to state 85


state 66

   42 retStmt: RETURN SEMICOLON .

    $default  reduce using rule 42 (retStmt)


state 67

   64 expr: call .

    $default  reduce using rule 64 (expr)


state 68

   41 retStmt: RETURN expr . SEMICOLON
   48 expr: expr . PLUS expr
   49     | expr . MINUS expr
   50     | expr . MULT expr
   51     | expr . DIV expr
   52     | expr . LT expr
   53     | expr . LE expr
   54     | expr . GT expr
   55     | expr . GE expr
   56     | expr . EQ expr
   57     | expr . NE expr

    DIV        shift, and go to state 86
    MULT       shift, and go to state 87
    PLUS       shift, and go to state 88
    MINUS      shift, and go to state 89
    LT         shift, and go to state 90
    NE         shift, and go to state 91
    EQ         shift, and go to state 92
    GT         shift, and go to state 93
    LE         shift, and go to state 94
    GE         shift, and go to state 95
    SEMICOLON  shift, and go to state 96


state 69

   36 assign: ID ASSIGN . expr
   39 call: . ID LPARENT argList RPARENT
   40     | . ID LPARENT RPARENT
   48 expr: . expr PLUS expr
   49     | . expr MINUS expr
   50     | . expr MULT expr
   51     | . expr DIV expr
   52     | . expr LT expr
   53     | . expr LE expr
   54     | . expr GT expr
   55     | . expr GE expr
   56     | . expr EQ expr
   57     | . expr NE expr
   58     | . MINUS expr
   59     | . INTNUM
   60     | . FLOATNUM
   61     | . ID
   62     | . ID LBRACKET expr RBRACKET
   63     | . LPARENT expr RPARENT
   64     | . call

    INTNUM    shift, and go to state 61
    FLOATNUM  shift, and go to state 62
    ID        shift, and go to state 63
    MINUS     shift, and go to state 64
    LPARENT   shift, and go to state 65

    call  go to state 67
    expr  go to state 97


state 70

   39 call: . ID LPARENT argList RPARENT
   39     | ID LPARENT . argList RPARENT
   40     | . ID LPARENT RPARENT
   40     | ID LPARENT . RPARENT
   48 expr: . expr PLUS expr
   49     | . expr MINUS expr
   50     | . expr MULT expr
   51     | . expr DIV expr
   52     | . expr LT expr
   53     | . expr LE expr
   54     | . expr GT expr
   55     | . expr GE expr
   56     | . expr EQ expr
   57     | . expr NE expr
   58     | . MINUS expr
   59     | . INTNUM
   60     | . FLOATNUM
   61     | . ID
   62     | . ID LBRACKET expr RBRACKET
   63     | . LPARENT expr RPARENT
   64     | . call
   65 argList: . expr
   66        | . expr COLON argList

    INTNUM    shift, and go to state 61
    FLOATNUM  shift, and go to state 62
    ID        shift, and go to state 63
    MINUS     shift, and go to state 64
    LPARENT   shift, and go to state 65
    RPARENT   shift, and go to state 98

    call     go to state 67
    expr     go to state 99
    argList  go to state 100


state 71

   37 assign: ID LBRACKET . expr RBRACKET ASSIGN expr
   39 call: . ID LPARENT argList RPARENT
   40     | . ID LPARENT RPARENT
   48 expr: . expr PLUS expr
   49     | . expr MINUS expr
   50     | . expr MULT expr
   51     | . expr DIV expr
   52     | . expr LT expr
   53     | . expr LE expr
   54     | . expr GT expr
   55     | . expr GE expr
   56     | . expr EQ expr
   57     | . expr NE expr
   58     | . MINUS expr
   59     | . INTNUM
   60     | . FLOATNUM
   61     | . ID
   62     | . ID LBRACKET expr RBRACKET
   63     | . LPARENT expr RPARENT
   64     | . call

    INTNUM    shift, and go to state 61
    FLOATNUM  shift, and go to state 62
    ID        shift, and go to state 63
    MINUS     shift, and go to state 64
    LPARENT   shift, and go to state 65

    call  go to state 67
    expr  go to state 101


state 72

   21 compoundStatement: LFANCYBRACKET decList stmtList . RFANCYBRACKET

    RFANCYBRACKET  shift, and go to state 102


state 73

   20 compoundStatement: LFANCYBRACKET stmtList RFANCYBRACKET .

    $default  reduce using rule 20 (compoundStatement)


state 74

   25 stmtListL: statement stmtListL .

    $default  reduce using rule 25 (stmtListL)


state 75

   35 assignStmt: assign SEMICOLON .

    $default  reduce using rule 35 (assignStmt)


state 76

   38 callStmt: call SEMICOLON .

    $default  reduce using rule 38 (callStmt)


state 77

   17 paramList: type identifier COLON paramList .

    $default  reduce using rule 17 (paramList)


state 78

   36 assign: ID . ASSIGN expr
   37       | ID . LBRACKET expr RBRACKET ASSIGN expr

    ASSIGN    shift, and go to state 69
    LBRACKET  shift, and go to state 71


state 79

   45 forStmt: FOR LPARENT assign . SEMICOLON expr SEMICOLON assign RPARENT statement

    SEMICOLON  shift, and go to state 103


state 80

   43 whileStmt: WHILE LPARENT expr . RPARENT statement
   48 expr: expr . PLUS expr
   49     | expr . MINUS expr
   50     | expr . MULT expr
   51     | expr . DIV expr
   52     | expr . LT expr
   53     | expr . LE expr
   54     | expr . GT expr
   55     | expr . GE expr
   56     | expr . EQ expr
   57     | expr . NE expr

    DIV      shift, and go to state 86
    MULT     shift, and go to state 87
    PLUS     shift, and go to state 88
    MINUS    shift, and go to state 89
    LT       shift, and go to state 90
    NE       shift, and go to state 91
    EQ       shift, and go to state 92
    GT       shift, and go to state 93
    LE       shift, and go to state 94
    GE       shift, and go to state 95
    RPARENT  shift, and go to state 104


state 81

   44 doWhileStmt: DO statement WHILE . LPARENT expr RPARENT SEMICOLON

    LPARENT  shift, and go to state 105


state 82

   46 ifStmt: IF LPARENT expr . RPARENT statement
   47       | IF LPARENT expr . RPARENT statement ELSE statement
   48 expr: expr . PLUS expr
   49     | expr . MINUS expr
   50     | expr . MULT expr
   51     | expr . DIV expr
   52     | expr . LT expr
   53     | expr . LE expr
   54     | expr . GT expr
   55     | expr . GE expr
   56     | expr . EQ expr
   57     | expr . NE expr

    DIV      shift, and go to state 86
    MULT     shift, and go to state 87
    PLUS     shift, and go to state 88
    MINUS    shift, and go to state 89
    LT       shift, and go to state 90
    NE       shift, and go to state 91
    EQ       shift, and go to state 92
    GT       shift, and go to state 93
    LE       shift, and go to state 94
    GE       shift, and go to state 95
    RPARENT  shift, and go to state 106


state 83

   39 call: . ID LPARENT argList RPARENT
   40     | . ID LPARENT RPARENT
   48 expr: . expr PLUS expr
   49     | . expr MINUS expr
   50     | . expr MULT expr
   51     | . expr DIV expr
   52     | . expr LT expr
   53     | . expr LE expr
   54     | . expr GT expr
   55     | . expr GE expr
   56     | . expr EQ expr
   57     | . expr NE expr
   58     | . MINUS expr
   59     | . INTNUM
   60     | . FLOATNUM
   61     | . ID
   62     | . ID LBRACKET expr RBRACKET
   62     | ID LBRACKET . expr RBRACKET
   63     | . LPARENT expr RPARENT
   64     | . call

    INTNUM    shift, and go to state 61
    FLOATNUM  shift, and go to state 62
    ID        shift, and go to state 63
    MINUS     shift, and go to state 64
    LPARENT   shift, and go to state 65

    call  go to state 67
    expr  go to state 107


state 84

   48 expr: expr . PLUS expr
   49     | expr . MINUS expr
   50     | expr . MULT expr
   51     | expr . DIV expr
   52     | expr . LT expr
   53     | expr . LE expr
   54     | expr . GT expr
   55     | expr . GE expr
   56     | expr . EQ expr
   57     | expr . NE expr
   58     | MINUS expr .  [RPARENT, RBRACKET, SEMICOLON, COLON]

    DIV    shift, and go to state 86
    MULT   shift, and go to state 87
    PLUS   shift, and go to state 88
    MINUS  shift, and go to state 89
    LT     shift, and go to state 90
    NE     shift, and go to state 91
    EQ     shift, and go to state 92
    GT     shift, and go to state 93
    LE     shift, and go to state 94
    GE     shift, and go to state 95

    $default  reduce using rule 58 (expr)

    Conflict between rule 58 and token DIV resolved as shift (MINUS < DIV).
    Conflict between rule 58 and token MULT resolved as shift (MINUS < MULT).
    Conflict between rule 58 and token PLUS resolved as shift (MINUS < PLUS).
    Conflict between rule 58 and token MINUS resolved as shift (%right MINUS).
    Conflict between rule 58 and token LT resolved as shift (MINUS < LT).
    Conflict between rule 58 and token NE resolved as shift (MINUS < NE).
    Conflict between rule 58 and token EQ resolved as shift (MINUS < EQ).
    Conflict between rule 58 and token GT resolved as shift (MINUS < GT).
    Conflict between rule 58 and token LE resolved as shift (MINUS < LE).
    Conflict between rule 58 and token GE resolved as shift (MINUS < GE).


state 85

   48 expr: expr . PLUS expr
   49     | expr . MINUS expr
   50     | expr . MULT expr
   51     | expr . DIV expr
   52     | expr . LT expr
   53     | expr . LE expr
   54     | expr . GT expr
   55     | expr . GE expr
   56     | expr . EQ expr
   57     | expr . NE expr
   63     | LPARENT expr . RPARENT

    DIV      shift, and go to state 86
    MULT     shift, and go to state 87
    PLUS     shift, and go to state 88
    MINUS    shift, and go to state 89
    LT       shift, and go to state 90
    NE       shift, and go to state 91
    EQ       shift, and go to state 92
    GT       shift, and go to state 93
    LE       shift, and go to state 94
    GE       shift, and go to state 95
    RPARENT  shift, and go to state 108


state 86

   39 call: . ID LPARENT argList RPARENT
   40     | . ID LPARENT RPARENT
   48 expr: . expr PLUS expr
   49     | . expr MINUS expr
   50     | . expr MULT expr
   51     | . expr DIV expr
   51     | expr DIV . expr
   52     | . expr LT expr
   53     | . expr LE expr
   54     | . expr GT expr
   55     | . expr GE expr
   56     | . expr EQ expr
   57     | . expr NE expr
   58     | . MINUS expr
   59     | . INTNUM
   60     | . FLOATNUM
   61     | . ID
   62     | . ID LBRACKET expr RBRACKET
   63     | . LPARENT expr RPARENT
   64     | . call

    INTNUM    shift, and go to state 61
    FLOATNUM  shift, and go to state 62
    ID        shift, and go to state 63
    MINUS     shift, and go to state 64
    LPARENT   shift, and go to state 65

    call  go to state 67
    expr  go to state 109


state 87

   39 call: . ID LPARENT argList RPARENT
   40     | . ID LPARENT RPARENT
   48 expr: . expr PLUS expr
   49     | . expr MINUS expr
   50     | . expr MULT expr
   50     | expr MULT . expr
   51     | . expr DIV expr
   52     | . expr LT expr
   53     | . expr LE expr
   54     | . expr GT expr
   55     | . expr GE expr
   56     | . expr EQ expr
   57     | . expr NE expr
   58     | . MINUS expr
   59     | . INTNUM
   60     | . FLOATNUM
   61     | . ID
   62     | . ID LBRACKET expr RBRACKET
   63     | . LPARENT expr RPARENT
   64     | . call

    INTNUM    shift, and go to state 61
    FLOATNUM  shift, and go to state 62
    ID        shift, and go to state 63
    MINUS     shift, and go to state 64
    LPARENT   shift, and go to state 65

    call  go to state 67
    expr  go to state 110


state 88

   39 call: . ID LPARENT argList RPARENT
   40     | . ID LPARENT RPARENT
   48 expr: . expr PLUS expr
   48     | expr PLUS . expr
   49     | . expr MINUS expr
   50     | . expr MULT expr
   51     | . expr DIV expr
   52     | . expr LT expr
   53     | . expr LE expr
   54     | . expr GT expr
   55     | . expr GE expr
   56     | . expr EQ expr
   57     | . expr NE expr
   58     | . MINUS expr
   59     | . INTNUM
   60     | . FLOATNUM
   61     | . ID
   62     | . ID LBRACKET expr RBRACKET
   63     | . LPARENT expr RPARENT
   64     | . call

    INTNUM    shift, and go to state 61
    FLOATNUM  shift, and go to state 62
    ID        shift, and go to state 63
    MINUS     shift, and go to state 64
    LPARENT   shift, and go to state 65

    call  go to state 67
    expr  go to state 111


state 89

   39 call: . ID LPARENT argList RPARENT
   40     | . ID LPARENT RPARENT
   48 expr: . expr PLUS expr
   49     | . expr MINUS expr
   49     | expr MINUS . expr
   50     | . expr MULT expr
   51     | . expr DIV expr
   52     | . expr LT expr
   53     | . expr LE expr
   54     | . expr GT expr
   55     | . expr GE expr
   56     | . expr EQ expr
   57     | . expr NE expr
   58     | . MINUS expr
   59     | . INTNUM
   60     | . FLOATNUM
   61     | . ID
   62     | . ID LBRACKET expr RBRACKET
   63     | . LPARENT expr RPARENT
   64     | . call

    INTNUM    shift, and go to state 61
    FLOATNUM  shift, and go to state 62
    ID        shift, and go to state 63
    MINUS     shift, and go to state 64
    LPARENT   shift, and go to state 65

    call  go to state 67
    expr  go to state 112


state 90

   39 call: . ID LPARENT argList RPARENT
   40     | . ID LPARENT RPARENT
   48 expr: . expr PLUS expr
   49     | . expr MINUS expr
   50     | . expr MULT expr
   51     | . expr DIV expr
   52     | . expr LT expr
   52     | expr LT . expr
   53     | . expr LE expr
   54     | . expr GT expr
   55     | . expr GE expr
   56     | . expr EQ expr
   57     | . expr NE expr
   58     | . MINUS expr
   59     | . INTNUM
   60     | . FLOATNUM
   61     | . ID
   62     | . ID LBRACKET expr RBRACKET
   63     | . LPARENT expr RPARENT
   64     | . call

    INTNUM    shift, and go to state 61
    FLOATNUM  shift, and go to state 62
    ID        shift, and go to state 63
    MINUS     shift, and go to state 64
    LPARENT   shift, and go to state 65

    call  go to state 67
    expr  go to state 113


state 91

   39 call: . ID LPARENT argList RPARENT
   40     | . ID LPARENT RPARENT
   48 expr: . expr PLUS expr
   49     | . expr MINUS expr
   50     | . expr MULT expr
   51     | . expr DIV expr
   52     | . expr LT expr
   53     | . expr LE expr
   54     | . expr GT expr
   55     | . expr GE expr
   56     | . expr EQ expr
   57     | . expr NE expr
   57     | expr NE . expr
   58     | . MINUS expr
   59     | . INTNUM
   60     | . FLOATNUM
   61     | . ID
   62     | . ID LBRACKET expr RBRACKET
   63     | . LPARENT expr RPARENT
   64     | . call

    INTNUM    shift, and go to state 61
    FLOATNUM  shift, and go to state 62
    ID        shift, and go to state 63
    MINUS     shift, and go to state 64
    LPARENT   shift, and go to state 65

    call  go to state 67
    expr  go to state 114


state 92

   39 call: . ID LPARENT argList RPARENT
   40     | . ID LPARENT RPARENT
   48 expr: . expr PLUS expr
   49     | . expr MINUS expr
   50     | . expr MULT expr
   51     | . expr DIV expr
   52     | . expr LT expr
   53     | . expr LE expr
   54     | . expr GT expr
   55     | . expr GE expr
   56     | . expr EQ expr
   56     | expr EQ . expr
   57     | . expr NE expr
   58     | . MINUS expr
   59     | . INTNUM
   60     | . FLOATNUM
   61     | . ID
   62     | . ID LBRACKET expr RBRACKET
   63     | . LPARENT expr RPARENT
   64     | . call

    INTNUM    shift, and go to state 61
    FLOATNUM  shift, and go to state 62
    ID        shift, and go to state 63
    MINUS     shift, and go to state 64
    LPARENT   shift, and go to state 65

    call  go to state 67
    expr  go to state 115


state 93

   39 call: . ID LPARENT argList RPARENT
   40     | . ID LPARENT RPARENT
   48 expr: . expr PLUS expr
   49     | . expr MINUS expr
   50     | . expr MULT expr
   51     | . expr DIV expr
   52     | . expr LT expr
   53     | . expr LE expr
   54     | . expr GT expr
   54     | expr GT . expr
   55     | . expr GE expr
   56     | . expr EQ expr
   57     | . expr NE expr
   58     | . MINUS expr
   59     | . INTNUM
   60     | . FLOATNUM
   61     | . ID
   62     | . ID LBRACKET expr RBRACKET
   63     | . LPARENT expr RPARENT
   64     | . call

    INTNUM    shift, and go to state 61
    FLOATNUM  shift, and go to state 62
    ID        shift, and go to state 63
    MINUS     shift, and go to state 64
    LPARENT   shift, and go to state 65

    call  go to state 67
    expr  go to state 116


state 94

   39 call: . ID LPARENT argList RPARENT
   40     | . ID LPARENT RPARENT
   48 expr: . expr PLUS expr
   49     | . expr MINUS expr
   50     | . expr MULT expr
   51     | . expr DIV expr
   52     | . expr LT expr
   53     | . expr LE expr
   53     | expr LE . expr
   54     | . expr GT expr
   55     | . expr GE expr
   56     | . expr EQ expr
   57     | . expr NE expr
   58     | . MINUS expr
   59     | . INTNUM
   60     | . FLOATNUM
   61     | . ID
   62     | . ID LBRACKET expr RBRACKET
   63     | . LPARENT expr RPARENT
   64     | . call

    INTNUM    shift, and go to state 61
    FLOATNUM  shift, and go to state 62
    ID        shift, and go to state 63
    MINUS     shift, and go to state 64
    LPARENT   shift, and go to state 65

    call  go to state 67
    expr  go to state 117


state 95

   39 call: . ID LPARENT argList RPARENT
   40     | . ID LPARENT RPARENT
   48 expr: . expr PLUS expr
   49     | . expr MINUS expr
   50     | . expr MULT expr
   51     | . expr DIV expr
   52     | . expr LT expr
   53     | . expr LE expr
   54     | . expr GT expr
   55     | . expr GE expr
   55     | expr GE . expr
   56     | . expr EQ expr
   57     | . expr NE expr
   58     | . MINUS expr
   59     | . INTNUM
   60     | . FLOATNUM
   61     | . ID
   62     | . ID LBRACKET expr RBRACKET
   63     | . LPARENT expr RPARENT
   64     | . call

    INTNUM    shift, and go to state 61
    FLOATNUM  shift, and go to state 62
    ID        shift, and go to state 63
    MINUS     shift, and go to state 64
    LPARENT   shift, and go to state 65

    call  go to state 67
    expr  go to state 118


state 96

   41 retStmt: RETURN expr SEMICOLON .

    $default  reduce using rule 41 (retStmt)


state 97

   36 assign: ID ASSIGN expr .  [RPARENT, SEMICOLON]
   48 expr: expr . PLUS expr
   49     | expr . MINUS expr
   50     | expr . MULT expr
   51     | expr . DIV expr
   52     | expr . LT expr
   53     | expr . LE expr
   54     | expr . GT expr
   55     | expr . GE expr
   56     | expr . EQ expr
   57     | expr . NE expr

    DIV    shift, and go to state 86
    MULT   shift, and go to state 87
    PLUS   shift, and go to state 88
    MINUS  shift, and go to state 89
    LT     shift, and go to state 90
    NE     shift, and go to state 91
    EQ     shift, and go to state 92
    GT     shift, and go to state 93
    LE     shift, and go to state 94
    GE     shift, and go to state 95

    $default  reduce using rule 36 (assign)


state 98

   40 call: ID LPARENT RPARENT .

    $default  reduce using rule 40 (call)


state 99

   48 expr: expr . PLUS expr
   49     | expr . MINUS expr
   50     | expr . MULT expr
   51     | expr . DIV expr
   52     | expr . LT expr
   53     | expr . LE expr
   54     | expr . GT expr
   55     | expr . GE expr
   56     | expr . EQ expr
   57     | expr . NE expr
   65 argList: expr .  [RPARENT]
   66        | expr . COLON argList

    DIV    shift, and go to state 86
    MULT   shift, and go to state 87
    PLUS   shift, and go to state 88
    MINUS  shift, and go to state 89
    LT     shift, and go to state 90
    NE     shift, and go to state 91
    EQ     shift, and go to state 92
    GT     shift, and go to state 93
    LE     shift, and go to state 94
    GE     shift, and go to state 95
    COLON  shift, and go to state 119

    $default  reduce using rule 65 (argList)


state 100

   39 call: ID LPARENT argList . RPARENT

    RPARENT  shift, and go to state 120


state 101

   37 assign: ID LBRACKET expr . RBRACKET ASSIGN expr
   48 expr: expr . PLUS expr
   49     | expr . MINUS expr
   50     | expr . MULT expr
   51     | expr . DIV expr
   52     | expr . LT expr
   53     | expr . LE expr
   54     | expr . GT expr
   55     | expr . GE expr
   56     | expr . EQ expr
   57     | expr . NE expr

    DIV       shift, and go to state 86
    MULT      shift, and go to state 87
    PLUS      shift, and go to state 88
    MINUS     shift, and go to state 89
    LT        shift, and go to state 90
    NE        shift, and go to state 91
    EQ        shift, and go to state 92
    GT        shift, and go to state 93
    LE        shift, and go to state 94
    GE        shift, and go to state 95
    RBRACKET  shift, and go to state 121


state 102

   21 compoundStatement: LFANCYBRACKET decList stmtList RFANCYBRACKET .

    $default  reduce using rule 21 (compoundStatement)


state 103

   39 call: . ID LPARENT argList RPARENT
   40     | . ID LPARENT RPARENT
   45 forStmt: FOR LPARENT assign SEMICOLON . expr SEMICOLON assign RPARENT statement
   48 expr: . expr PLUS expr
   49     | . expr MINUS expr
   50     | . expr MULT expr
   51     | . expr DIV expr
   52     | . expr LT expr
   53     | . expr LE expr
   54     | . expr GT expr
   55     | . expr GE expr
   56     | . expr EQ expr
   57     | . expr NE expr
   58     | . MINUS expr
   59     | . INTNUM
   60     | . FLOATNUM
   61     | . ID
   62     | . ID LBRACKET expr RBRACKET
   63     | . LPARENT expr RPARENT
   64     | . call

    INTNUM    shift, and go to state 61
    FLOATNUM  shift, and go to state 62
    ID        shift, and go to state 63
    MINUS     shift, and go to state 64
    LPARENT   shift, and go to state 65

    call  go to state 67
    expr  go to state 122


state 104

   20 compoundStatement: . LFANCYBRACKET stmtList RFANCYBRACKET
   21                  | . LFANCYBRACKET decList stmtList RFANCYBRACKET
   26 statement: . assignStmt
   27          | . callStmt
   28          | . retStmt
   29          | . whileStmt
   30          | . doWhileStmt
   31          | . forStmt
   32          | . ifStmt
   33          | . compoundStatement
   34          | . SEMICOLON
   35 assignStmt: . assign SEMICOLON
   36 assign: . ID ASSIGN expr
   37       | . ID LBRACKET expr RBRACKET ASSIGN expr
   38 callStmt: . call SEMICOLON
   39 call: . ID LPARENT argList RPARENT
   40     | . ID LPARENT RPARENT
   41 retStmt: . RETURN expr SEMICOLON
   42        | . RETURN SEMICOLON
   43 whileStmt: . WHILE LPARENT expr RPARENT statement
   43          | WHILE LPARENT expr RPARENT . statement
   44 doWhileStmt: . DO statement WHILE LPARENT expr RPARENT SEMICOLON
   45 forStmt: . FOR LPARENT assign SEMICOLON expr SEMICOLON assign RPARENT statement
   46 ifStmt: . IF LPARENT expr RPARENT statement
   47       | . IF LPARENT expr RPARENT statement ELSE statement

    FOR            shift, and go to state 33
    WHILE          shift, and go to state 34
    DO             shift, and go to state 35
    IF             shift, and go to state 36
    RETURN         shift, and go to state 37
    ID             shift, and go to state 38
    LFANCYBRACKET  shift, and go to state 28
    SEMICOLON      shift, and go to state 39

    compoundStatement  go to state 42
    statement          go to state 123
    assignStmt         go to state 46
    assign             go to state 47
    callStmt           go to state 48
    call               go to state 49
    retStmt            go to state 50
    whileStmt          go to state 51
    doWhileStmt        go to state 52
    forStmt            go to state 53
    ifStmt             go to state 54


state 105

   39 call: . ID LPARENT argList RPARENT
   40     | . ID LPARENT RPARENT
   44 doWhileStmt: DO statement WHILE LPARENT . expr RPARENT SEMICOLON
   48 expr: . expr PLUS expr
   49     | . expr MINUS expr
   50     | . expr MULT expr
   51     | . expr DIV expr
   52     | . expr LT expr
   53     | . expr LE expr
   54     | . expr GT expr
   55     | . expr GE expr
   56     | . expr EQ expr
   57     | . expr NE expr
   58     | . MINUS expr
   59     | . INTNUM
   60     | . FLOATNUM
   61     | . ID
   62     | . ID LBRACKET expr RBRACKET
   63     | . LPARENT expr RPARENT
   64     | . call

    INTNUM    shift, and go to state 61
    FLOATNUM  shift, and go to state 62
    ID        shift, and go to state 63
    MINUS     shift, and go to state 64
    LPARENT   shift, and go to state 65

    call  go to state 67
    expr  go to state 124


state 106

   20 compoundStatement: . LFANCYBRACKET stmtList RFANCYBRACKET
   21                  | . LFANCYBRACKET decList stmtList RFANCYBRACKET
   26 statement: . assignStmt
   27          | . callStmt
   28          | . retStmt
   29          | . whileStmt
   30          | . doWhileStmt
   31          | . forStmt
   32          | . ifStmt
   33          | . compoundStatement
   34          | . SEMICOLON
   35 assignStmt: . assign SEMICOLON
   36 assign: . ID ASSIGN expr
   37       | . ID LBRACKET expr RBRACKET ASSIGN expr
   38 callStmt: . call SEMICOLON
   39 call: . ID LPARENT argList RPARENT
   40     | . ID LPARENT RPARENT
   41 retStmt: . RETURN expr SEMICOLON
   42        | . RETURN SEMICOLON
   43 whileStmt: . WHILE LPARENT expr RPARENT statement
   44 doWhileStmt: . DO statement WHILE LPARENT expr RPARENT SEMICOLON
   45 forStmt: . FOR LPARENT assign SEMICOLON expr SEMICOLON assign RPARENT statement
   46 ifStmt: . IF LPARENT expr RPARENT statement
   46       | IF LPARENT expr RPARENT . statement
   47       | . IF LPARENT expr RPARENT statement ELSE statement
   47       | IF LPARENT expr RPARENT . statement ELSE statement

    FOR            shift, and go to state 33
    WHILE          shift, and go to state 34
    DO             shift, and go to state 35
    IF             shift, and go to state 36
    RETURN         shift, and go to state 37
    ID             shift, and go to state 38
    LFANCYBRACKET  shift, and go to state 28
    SEMICOLON      shift, and go to state 39

    compoundStatement  go to state 42
    statement          go to state 125
    assignStmt         go to state 46
    assign             go to state 47
    callStmt           go to state 48
    call               go to state 49
    retStmt            go to state 50
    whileStmt          go to state 51
    doWhileStmt        go to state 52
    forStmt            go to state 53
    ifStmt             go to state 54


state 107

   48 expr: expr . PLUS expr
   49     | expr . MINUS expr
   50     | expr . MULT expr
   51     | expr . DIV expr
   52     | expr . LT expr
   53     | expr . LE expr
   54     | expr . GT expr
   55     | expr . GE expr
   56     | expr . EQ expr
   57     | expr . NE expr
   62     | ID LBRACKET expr . RBRACKET

    DIV       shift, and go to state 86
    MULT      shift, and go to state 87
    PLUS      shift, and go to state 88
    MINUS     shift, and go to state 89
    LT        shift, and go to state 90
    NE        shift, and go to state 91
    EQ        shift, and go to state 92
    GT        shift, and go to state 93
    LE        shift, and go to state 94
    GE        shift, and go to state 95
    RBRACKET  shift, and go to state 126


state 108

   63 expr: LPARENT expr RPARENT .

    $default  reduce using rule 63 (expr)


state 109

   48 expr: expr . PLUS expr
   49     | expr . MINUS expr
   50     | expr . MULT expr
   51     | expr . DIV expr
   51     | expr DIV expr .  [DIV, MULT, MINUS, RPARENT, RBRACKET, SEMICOLON, COLON]
   52     | expr . LT expr
   53     | expr . LE expr
   54     | expr . GT expr
   55     | expr . GE expr
   56     | expr . EQ expr
   57     | expr . NE expr

    PLUS  shift, and go to state 88
    LT    shift, and go to state 90
    NE    shift, and go to state 91
    EQ    shift, and go to state 92
    GT    shift, and go to state 93
    LE    shift, and go to state 94
    GE    shift, and go to state 95

    $default  reduce using rule 51 (expr)

    Conflict between rule 51 and token DIV resolved as reduce (%left DIV).
    Conflict between rule 51 and token MULT resolved as reduce (%left MULT).
    Conflict between rule 51 and token PLUS resolved as shift (DIV < PLUS).
    Conflict between rule 51 and token MINUS resolved as reduce (MINUS < DIV).
    Conflict between rule 51 and token LT resolved as shift (DIV < LT).
    Conflict between rule 51 and token NE resolved as shift (DIV < NE).
    Conflict between rule 51 and token EQ resolved as shift (DIV < EQ).
    Conflict between rule 51 and token GT resolved as shift (DIV < GT).
    Conflict between rule 51 and token LE resolved as shift (DIV < LE).
    Conflict between rule 51 and token GE resolved as shift (DIV < GE).


state 110

   48 expr: expr . PLUS expr
   49     | expr . MINUS expr
   50     | expr . MULT expr
   50     | expr MULT expr .  [DIV, MULT, MINUS, RPARENT, RBRACKET, SEMICOLON, COLON]
   51     | expr . DIV expr
   52     | expr . LT expr
   53     | expr . LE expr
   54     | expr . GT expr
   55     | expr . GE expr
   56     | expr . EQ expr
   57     | expr . NE expr

    PLUS  shift, and go to state 88
    LT    shift, and go to state 90
    NE    shift, and go to state 91
    EQ    shift, and go to state 92
    GT    shift, and go to state 93
    LE    shift, and go to state 94
    GE    shift, and go to state 95

    $default  reduce using rule 50 (expr)

    Conflict between rule 50 and token DIV resolved as reduce (%left DIV).
    Conflict between rule 50 and token MULT resolved as reduce (%left MULT).
    Conflict between rule 50 and token PLUS resolved as shift (MULT < PLUS).
    Conflict between rule 50 and token MINUS resolved as reduce (MINUS < MULT).
    Conflict between rule 50 and token LT resolved as shift (MULT < LT).
    Conflict between rule 50 and token NE resolved as shift (MULT < NE).
    Conflict between rule 50 and token EQ resolved as shift (MULT < EQ).
    Conflict between rule 50 and token GT resolved as shift (MULT < GT).
    Conflict between rule 50 and token LE resolved as shift (MULT < LE).
    Conflict between rule 50 and token GE resolved as shift (MULT < GE).


state 111

   48 expr: expr . PLUS expr
   48     | expr PLUS expr .  [DIV, MULT, PLUS, MINUS, RPARENT, RBRACKET, SEMICOLON, COLON]
   49     | expr . MINUS expr
   50     | expr . MULT expr
   51     | expr . DIV expr
   52     | expr . LT expr
   53     | expr . LE expr
   54     | expr . GT expr
   55     | expr . GE expr
   56     | expr . EQ expr
   57     | expr . NE expr

    LT  shift, and go to state 90
    NE  shift, and go to state 91
    EQ  shift, and go to state 92
    GT  shift, and go to state 93
    LE  shift, and go to state 94
    GE  shift, and go to state 95

    $default  reduce using rule 48 (expr)

    Conflict between rule 48 and token DIV resolved as reduce (DIV < PLUS).
    Conflict between rule 48 and token MULT resolved as reduce (MULT < PLUS).
    Conflict between rule 48 and token PLUS resolved as reduce (%left PLUS).
    Conflict between rule 48 and token MINUS resolved as reduce (MINUS < PLUS).
    Conflict between rule 48 and token LT resolved as shift (PLUS < LT).
    Conflict between rule 48 and token NE resolved as shift (PLUS < NE).
    Conflict between rule 48 and token EQ resolved as shift (PLUS < EQ).
    Conflict between rule 48 and token GT resolved as shift (PLUS < GT).
    Conflict between rule 48 and token LE resolved as shift (PLUS < LE).
    Conflict between rule 48 and token GE resolved as shift (PLUS < GE).


state 112

   48 expr: expr . PLUS expr
   49     | expr . MINUS expr
   49     | expr MINUS expr .  [RPARENT, RBRACKET, SEMICOLON, COLON]
   50     | expr . MULT expr
   51     | expr . DIV expr
   52     | expr . LT expr
   53     | expr . LE expr
   54     | expr . GT expr
   55     | expr . GE expr
   56     | expr . EQ expr
   57     | expr . NE expr

    DIV    shift, and go to state 86
    MULT   shift, and go to state 87
    PLUS   shift, and go to state 88
    MINUS  shift, and go to state 89
    LT     shift, and go to state 90
    NE     shift, and go to state 91
    EQ     shift, and go to state 92
    GT     shift, and go to state 93
    LE     shift, and go to state 94
    GE     shift, and go to state 95

    $default  reduce using rule 49 (expr)

    Conflict between rule 49 and token DIV resolved as shift (MINUS < DIV).
    Conflict between rule 49 and token MULT resolved as shift (MINUS < MULT).
    Conflict between rule 49 and token PLUS resolved as shift (MINUS < PLUS).
    Conflict between rule 49 and token MINUS resolved as shift (%right MINUS).
    Conflict between rule 49 and token LT resolved as shift (MINUS < LT).
    Conflict between rule 49 and token NE resolved as shift (MINUS < NE).
    Conflict between rule 49 and token EQ resolved as shift (MINUS < EQ).
    Conflict between rule 49 and token GT resolved as shift (MINUS < GT).
    Conflict between rule 49 and token LE resolved as shift (MINUS < LE).
    Conflict between rule 49 and token GE resolved as shift (MINUS < GE).


state 113

   48 expr: expr . PLUS expr
   49     | expr . MINUS expr
   50     | expr . MULT expr
   51     | expr . DIV expr
   52     | expr . LT expr
   52     | expr LT expr .  [DIV, MULT, PLUS, MINUS, LT, GT, LE, GE, RPARENT, RBRACKET, SEMICOLON, COLON]
   53     | expr . LE expr
   54     | expr . GT expr
   55     | expr . GE expr
   56     | expr . EQ expr
   57     | expr . NE expr

    NE  shift, and go to state 91
    EQ  shift, and go to state 92

    $default  reduce using rule 52 (expr)

    Conflict between rule 52 and token DIV resolved as reduce (DIV < LT).
    Conflict between rule 52 and token MULT resolved as reduce (MULT < LT).
    Conflict between rule 52 and token PLUS resolved as reduce (PLUS < LT).
    Conflict between rule 52 and token MINUS resolved as reduce (MINUS < LT).
    Conflict between rule 52 and token LT resolved as reduce (%left LT).
    Conflict between rule 52 and token NE resolved as shift (LT < NE).
    Conflict between rule 52 and token EQ resolved as shift (LT < EQ).
    Conflict between rule 52 and token GT resolved as reduce (%left GT).
    Conflict between rule 52 and token LE resolved as reduce (%left LE).
    Conflict between rule 52 and token GE resolved as reduce (%left GE).


state 114

   48 expr: expr . PLUS expr
   49     | expr . MINUS expr
   50     | expr . MULT expr
   51     | expr . DIV expr
   52     | expr . LT expr
   53     | expr . LE expr
   54     | expr . GT expr
   55     | expr . GE expr
   56     | expr . EQ expr
   57     | expr . NE expr
   57     | expr NE expr .  [DIV, MULT, PLUS, MINUS, LT, NE, EQ, GT, LE, GE, RPARENT, RBRACKET, SEMICOLON, COLON]

    $default  reduce using rule 57 (expr)

    Conflict between rule 57 and token DIV resolved as reduce (DIV < NE).
    Conflict between rule 57 and token MULT resolved as reduce (MULT < NE).
    Conflict between rule 57 and token PLUS resolved as reduce (PLUS < NE).
    Conflict between rule 57 and token MINUS resolved as reduce (MINUS < NE).
    Conflict between rule 57 and token LT resolved as reduce (LT < NE).
    Conflict between rule 57 and token NE resolved as reduce (%left NE).
    Conflict between rule 57 and token EQ resolved as reduce (%left EQ).
    Conflict between rule 57 and token GT resolved as reduce (GT < NE).
    Conflict between rule 57 and token LE resolved as reduce (LE < NE).
    Conflict between rule 57 and token GE resolved as reduce (GE < NE).


state 115

   48 expr: expr . PLUS expr
   49     | expr . MINUS expr
   50     | expr . MULT expr
   51     | expr . DIV expr
   52     | expr . LT expr
   53     | expr . LE expr
   54     | expr . GT expr
   55     | expr . GE expr
   56     | expr . EQ expr
   56     | expr EQ expr .  [DIV, MULT, PLUS, MINUS, LT, NE, EQ, GT, LE, GE, RPARENT, RBRACKET, SEMICOLON, COLON]
   57     | expr . NE expr

    $default  reduce using rule 56 (expr)

    Conflict between rule 56 and token DIV resolved as reduce (DIV < EQ).
    Conflict between rule 56 and token MULT resolved as reduce (MULT < EQ).
    Conflict between rule 56 and token PLUS resolved as reduce (PLUS < EQ).
    Conflict between rule 56 and token MINUS resolved as reduce (MINUS < EQ).
    Conflict between rule 56 and token LT resolved as reduce (LT < EQ).
    Conflict between rule 56 and token NE resolved as reduce (%left NE).
    Conflict between rule 56 and token EQ resolved as reduce (%left EQ).
    Conflict between rule 56 and token GT resolved as reduce (GT < EQ).
    Conflict between rule 56 and token LE resolved as reduce (LE < EQ).
    Conflict between rule 56 and token GE resolved as reduce (GE < EQ).


state 116

   48 expr: expr . PLUS expr
   49     | expr . MINUS expr
   50     | expr . MULT expr
   51     | expr . DIV expr
   52     | expr . LT expr
   53     | expr . LE expr
   54     | expr . GT expr
   54     | expr GT expr .  [DIV, MULT, PLUS, MINUS, LT, GT, LE, GE, RPARENT, RBRACKET, SEMICOLON, COLON]
   55     | expr . GE expr
   56     | expr . EQ expr
   57     | expr . NE expr

    NE  shift, and go to state 91
    EQ  shift, and go to state 92

    $default  reduce using rule 54 (expr)

    Conflict between rule 54 and token DIV resolved as reduce (DIV < GT).
    Conflict between rule 54 and token MULT resolved as reduce (MULT < GT).
    Conflict between rule 54 and token PLUS resolved as reduce (PLUS < GT).
    Conflict between rule 54 and token MINUS resolved as reduce (MINUS < GT).
    Conflict between rule 54 and token LT resolved as reduce (%left LT).
    Conflict between rule 54 and token NE resolved as shift (GT < NE).
    Conflict between rule 54 and token EQ resolved as shift (GT < EQ).
    Conflict between rule 54 and token GT resolved as reduce (%left GT).
    Conflict between rule 54 and token LE resolved as reduce (%left LE).
    Conflict between rule 54 and token GE resolved as reduce (%left GE).


state 117

   48 expr: expr . PLUS expr
   49     | expr . MINUS expr
   50     | expr . MULT expr
   51     | expr . DIV expr
   52     | expr . LT expr
   53     | expr . LE expr
   53     | expr LE expr .  [DIV, MULT, PLUS, MINUS, LT, GT, LE, GE, RPARENT, RBRACKET, SEMICOLON, COLON]
   54     | expr . GT expr
   55     | expr . GE expr
   56     | expr . EQ expr
   57     | expr . NE expr

    NE  shift, and go to state 91
    EQ  shift, and go to state 92

    $default  reduce using rule 53 (expr)

    Conflict between rule 53 and token DIV resolved as reduce (DIV < LE).
    Conflict between rule 53 and token MULT resolved as reduce (MULT < LE).
    Conflict between rule 53 and token PLUS resolved as reduce (PLUS < LE).
    Conflict between rule 53 and token MINUS resolved as reduce (MINUS < LE).
    Conflict between rule 53 and token LT resolved as reduce (%left LT).
    Conflict between rule 53 and token NE resolved as shift (LE < NE).
    Conflict between rule 53 and token EQ resolved as shift (LE < EQ).
    Conflict between rule 53 and token GT resolved as reduce (%left GT).
    Conflict between rule 53 and token LE resolved as reduce (%left LE).
    Conflict between rule 53 and token GE resolved as reduce (%left GE).


state 118

   48 expr: expr . PLUS expr
   49     | expr . MINUS expr
   50     | expr . MULT expr
   51     | expr . DIV expr
   52     | expr . LT expr
   53     | expr . LE expr
   54     | expr . GT expr
   55     | expr . GE expr
   55     | expr GE expr .  [DIV, MULT, PLUS, MINUS, LT, GT, LE, GE, RPARENT, RBRACKET, SEMICOLON, COLON]
   56     | expr . EQ expr
   57     | expr . NE expr

    NE  shift, and go to state 91
    EQ  shift, and go to state 92

    $default  reduce using rule 55 (expr)

    Conflict between rule 55 and token DIV resolved as reduce (DIV < GE).
    Conflict between rule 55 and token MULT resolved as reduce (MULT < GE).
    Conflict between rule 55 and token PLUS resolved as reduce (PLUS < GE).
    Conflict between rule 55 and token MINUS resolved as reduce (MINUS < GE).
    Conflict between rule 55 and token LT resolved as reduce (%left LT).
    Conflict between rule 55 and token NE resolved as shift (GE < NE).
    Conflict between rule 55 and token EQ resolved as shift (GE < EQ).
    Conflict between rule 55 and token GT resolved as reduce (%left GT).
    Conflict between rule 55 and token LE resolved as reduce (%left LE).
    Conflict between rule 55 and token GE resolved as reduce (%left GE).


state 119

   39 call: . ID LPARENT argList RPARENT
   40     | . ID LPARENT RPARENT
   48 expr: . expr PLUS expr
   49     | . expr MINUS expr
   50     | . expr MULT expr
   51     | . expr DIV expr
   52     | . expr LT expr
   53     | . expr LE expr
   54     | . expr GT expr
   55     | . expr GE expr
   56     | . expr EQ expr
   57     | . expr NE expr
   58     | . MINUS expr
   59     | . INTNUM
   60     | . FLOATNUM
   61     | . ID
   62     | . ID LBRACKET expr RBRACKET
   63     | . LPARENT expr RPARENT
   64     | . call
   65 argList: . expr
   66        | . expr COLON argList
   66        | expr COLON . argList

    INTNUM    shift, and go to state 61
    FLOATNUM  shift, and go to state 62
    ID        shift, and go to state 63
    MINUS     shift, and go to state 64
    LPARENT   shift, and go to state 65

    call     go to state 67
    expr     go to state 99
    argList  go to state 127


state 120

   39 call: ID LPARENT argList RPARENT .

    $default  reduce using rule 39 (call)


state 121

   37 assign: ID LBRACKET expr RBRACKET . ASSIGN expr

    ASSIGN  shift, and go to state 128


state 122

   45 forStmt: FOR LPARENT assign SEMICOLON expr . SEMICOLON assign RPARENT statement
   48 expr: expr . PLUS expr
   49     | expr . MINUS expr
   50     | expr . MULT expr
   51     | expr . DIV expr
   52     | expr . LT expr
   53     | expr . LE expr
   54     | expr . GT expr
   55     | expr . GE expr
   56     | expr . EQ expr
   57     | expr . NE expr

    DIV        shift, and go to state 86
    MULT       shift, and go to state 87
    PLUS       shift, and go to state 88
    MINUS      shift, and go to state 89
    LT         shift, and go to state 90
    NE         shift, and go to state 91
    EQ         shift, and go to state 92
    GT         shift, and go to state 93
    LE         shift, and go to state 94
    GE         shift, and go to state 95
    SEMICOLON  shift, and go to state 129


state 123

   43 whileStmt: WHILE LPARENT expr RPARENT statement .

    $default  reduce using rule 43 (whileStmt)


state 124

   44 doWhileStmt: DO statement WHILE LPARENT expr . RPARENT SEMICOLON
   48 expr: expr . PLUS expr
   49     | expr . MINUS expr
   50     | expr . MULT expr
   51     | expr . DIV expr
   52     | expr . LT expr
   53     | expr . LE expr
   54     | expr . GT expr
   55     | expr . GE expr
   56     | expr . EQ expr
   57     | expr . NE expr

    DIV      shift, and go to state 86
    MULT     shift, and go to state 87
    PLUS     shift, and go to state 88
    MINUS    shift, and go to state 89
    LT       shift, and go to state 90
    NE       shift, and go to state 91
    EQ       shift, and go to state 92
    GT       shift, and go to state 93
    LE       shift, and go to state 94
    GE       shift, and go to state 95
    RPARENT  shift, and go to state 130


state 125

   46 ifStmt: IF LPARENT expr RPARENT statement .  [FOR, WHILE, DO, IF, RETURN, ID, LFANCYBRACKET, RFANCYBRACKET, SEMICOLON]
   47       | IF LPARENT expr RPARENT statement . ELSE statement

    ELSE  shift, and go to state 131

    $default  reduce using rule 46 (ifStmt)

    Conflict between rule 46 and token ELSE resolved as shift (RPARENT < ELSE).


state 126

   62 expr: ID LBRACKET expr RBRACKET .

    $default  reduce using rule 62 (expr)


state 127

   66 argList: expr COLON argList .

    $default  reduce using rule 66 (argList)


state 128

   37 assign: ID LBRACKET expr RBRACKET ASSIGN . expr
   39 call: . ID LPARENT argList RPARENT
   40     | . ID LPARENT RPARENT
   48 expr: . expr PLUS expr
   49     | . expr MINUS expr
   50     | . expr MULT expr
   51     | . expr DIV expr
   52     | . expr LT expr
   53     | . expr LE expr
   54     | . expr GT expr
   55     | . expr GE expr
   56     | . expr EQ expr
   57     | . expr NE expr
   58     | . MINUS expr
   59     | . INTNUM
   60     | . FLOATNUM
   61     | . ID
   62     | . ID LBRACKET expr RBRACKET
   63     | . LPARENT expr RPARENT
   64     | . call

    INTNUM    shift, and go to state 61
    FLOATNUM  shift, and go to state 62
    ID        shift, and go to state 63
    MINUS     shift, and go to state 64
    LPARENT   shift, and go to state 65

    call  go to state 67
    expr  go to state 132


state 129

   36 assign: . ID ASSIGN expr
   37       | . ID LBRACKET expr RBRACKET ASSIGN expr
   45 forStmt: FOR LPARENT assign SEMICOLON expr SEMICOLON . assign RPARENT statement

    ID  shift, and go to state 78

    assign  go to state 133


state 130

   44 doWhileStmt: DO statement WHILE LPARENT expr RPARENT . SEMICOLON

    SEMICOLON  shift, and go to state 134


state 131

   20 compoundStatement: . LFANCYBRACKET stmtList RFANCYBRACKET
   21                  | . LFANCYBRACKET decList stmtList RFANCYBRACKET
   26 statement: . assignStmt
   27          | . callStmt
   28          | . retStmt
   29          | . whileStmt
   30          | . doWhileStmt
   31          | . forStmt
   32          | . ifStmt
   33          | . compoundStatement
   34          | . SEMICOLON
   35 assignStmt: . assign SEMICOLON
   36 assign: . ID ASSIGN expr
   37       | . ID LBRACKET expr RBRACKET ASSIGN expr
   38 callStmt: . call SEMICOLON
   39 call: . ID LPARENT argList RPARENT
   40     | . ID LPARENT RPARENT
   41 retStmt: . RETURN expr SEMICOLON
   42        | . RETURN SEMICOLON
   43 whileStmt: . WHILE LPARENT expr RPARENT statement
   44 doWhileStmt: . DO statement WHILE LPARENT expr RPARENT SEMICOLON
   45 forStmt: . FOR LPARENT assign SEMICOLON expr SEMICOLON assign RPARENT statement
   46 ifStmt: . IF LPARENT expr RPARENT statement
   47       | . IF LPARENT expr RPARENT statement ELSE statement
   47       | IF LPARENT expr RPARENT statement ELSE . statement

    FOR            shift, and go to state 33
    WHILE          shift, and go to state 34
    DO             shift, and go to state 35
    IF             shift, and go to state 36
    RETURN         shift, and go to state 37
    ID             shift, and go to state 38
    LFANCYBRACKET  shift, and go to state 28
    SEMICOLON      shift, and go to state 39

    compoundStatement  go to state 42
    statement          go to state 135
    assignStmt         go to state 46
    assign             go to state 47
    callStmt           go to state 48
    call               go to state 49
    retStmt            go to state 50
    whileStmt          go to state 51
    doWhileStmt        go to state 52
    forStmt            go to state 53
    ifStmt             go to state 54


state 132

   37 assign: ID LBRACKET expr RBRACKET ASSIGN expr .  [RPARENT, SEMICOLON]
   48 expr: expr . PLUS expr
   49     | expr . MINUS expr
   50     | expr . MULT expr
   51     | expr . DIV expr
   52     | expr . LT expr
   53     | expr . LE expr
   54     | expr . GT expr
   55     | expr . GE expr
   56     | expr . EQ expr
   57     | expr . NE expr

    DIV    shift, and go to state 86
    MULT   shift, and go to state 87
    PLUS   shift, and go to state 88
    MINUS  shift, and go to state 89
    LT     shift, and go to state 90
    NE     shift, and go to state 91
    EQ     shift, and go to state 92
    GT     shift, and go to state 93
    LE     shift, and go to state 94
    GE     shift, and go to state 95

    $default  reduce using rule 37 (assign)


state 133

   45 forStmt: FOR LPARENT assign SEMICOLON expr SEMICOLON assign . RPARENT statement

    RPARENT  shift, and go to state 136


state 134

   44 doWhileStmt: DO statement WHILE LPARENT expr RPARENT SEMICOLON .

    $default  reduce using rule 44 (doWhileStmt)


state 135

   47 ifStmt: IF LPARENT expr RPARENT statement ELSE statement .

    $default  reduce using rule 47 (ifStmt)


state 136

   20 compoundStatement: . LFANCYBRACKET stmtList RFANCYBRACKET
   21                  | . LFANCYBRACKET decList stmtList RFANCYBRACKET
   26 statement: . assignStmt
   27          | . callStmt
   28          | . retStmt
   29          | . whileStmt
   30          | . doWhileStmt
   31          | . forStmt
   32          | . ifStmt
   33          | . compoundStatement
   34          | . SEMICOLON
   35 assignStmt: . assign SEMICOLON
   36 assign: . ID ASSIGN expr
   37       | . ID LBRACKET expr RBRACKET ASSIGN expr
   38 callStmt: . call SEMICOLON
   39 call: . ID LPARENT argList RPARENT
   40     | . ID LPARENT RPARENT
   41 retStmt: . RETURN expr SEMICOLON
   42        | . RETURN SEMICOLON
   43 whileStmt: . WHILE LPARENT expr RPARENT statement
   44 doWhileStmt: . DO statement WHILE LPARENT expr RPARENT SEMICOLON
   45 forStmt: . FOR LPARENT assign SEMICOLON expr SEMICOLON assign RPARENT statement
   45        | FOR LPARENT assign SEMICOLON expr SEMICOLON assign RPARENT . statement
   46 ifStmt: . IF LPARENT expr RPARENT statement
   47       | . IF LPARENT expr RPARENT statement ELSE statement

    FOR            shift, and go to state 33
    WHILE          shift, and go to state 34
    DO             shift, and go to state 35
    IF             shift, and go to state 36
    RETURN         shift, and go to state 37
    ID             shift, and go to state 38
    LFANCYBRACKET  shift, and go to state 28
    SEMICOLON      shift, and go to state 39

    compoundStatement  go to state 42
    statement          go to state 137
    assignStmt         go to state 46
    assign             go to state 47
    callStmt           go to state 48
    call               go to state 49
    retStmt            go to state 50
    whileStmt          go to state 51
    doWhileStmt        go to state 52
    forStmt            go to state 53
    ifStmt             go to state 54


state 137

   45 forStmt: FOR LPARENT assign SEMICOLON expr SEMICOLON assign RPARENT statement .

    $default  reduce using rule 45 (forStmt)
